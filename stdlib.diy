;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)))

;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.

(define or
    (lambda (a b)
        (if a
            #t
            (if b
                #t
                #f))))

(define and
    (lambda (a b)
        (if a
            (if b
                #t
                #f)
            #f)))

(define xor
    (lambda (a b)
        (if a
            (if (not b)
                #t
                #f)
            (if b
                #t
                #f))))

(define >=
    (lambda (a b)
        (if (> a b)
            #t
            (if (eq a b)
                #t
                #f))))

(define <=
    (lambda (a b)
        (if (not (> a b))
            #t
            #f)))

(define <
    (lambda (a b)
        (if (>= a b)
            #f
            #t)))

(define sum
    (lambda (a)
        (if (empty a)
            0
            (+ (head a) (sum (tail a))))))

(define length
    (lambda (a)
        (if (empty a)
            0
            (+ 1 (length (tail a))))))

(define append
    (lambda (a b)
        (if (empty a)
            b
            (cons (head a)
                  (append (tail a) b)))))

(define filter
    (lambda (f a)
        (if (empty a)
            '()
            (if (f (head a))
                (cons (head a) (filter f (tail a)))
                (filter f (tail a))))))

(define map
    (lambda (f a)
        (if (empty a)
            '()
             (cons (f (head a))
                   (map f (tail a))))))

(define reverse
    (lambda (a)
        (if (empty a)
            '()
             (append (reverse (tail a))
                     (cons (head a) '())))))

(define range
    (lambda (a b)
        (if (> a b)
            '()
            (cons a (range (+ a 1) b)))))

(define merge
    (lambda (a b)
        (if (empty a)
            b
            (if (empty b)
                a
                (if (< (head a) (head b))
                    (cons (head a)
                          (merge (tail a) b))
                    (cons (head b)
                          (merge a (tail b))))))))

(define sort
    (lambda (a)
        (if (empty a)
            '()
            (merge (cons (head a) '())
                   (sort (tail a))))))
